//
//  ArrowStyleKitName.swift
//  ProjectName
//
//  Created by  on 8/2/16.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class ArrowStyleKitName : NSObject {

    //// Drawing Methods

    public class func drawArrow(arrowText: String = "IS COMSUMER OF", leftArrowBottom: Bool = true, leftArrowTop: Bool = true, rightArrowTop: Bool = true, rightArrowBottom: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.036, green: 0.001, blue: 0.001, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 28, y: 27, width: 189, height: 18))
        color.setFill()
        rectanglePath.fill()


        //// rightArrow
        if (rightArrowTop) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 217, y: 36))
            bezierPath.addLine(to: CGPoint(x: 217, y: 7))
            bezierPath.addLine(to: CGPoint(x: 245, y: 36))
            bezierPath.addLine(to: CGPoint(x: 217, y: 36))
            bezierPath.close()
            color.setFill()
            bezierPath.fill()
        }


        if (rightArrowBottom) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 217, y: 36))
            bezier2Path.addLine(to: CGPoint(x: 217, y: 65))
            bezier2Path.addLine(to: CGPoint(x: 245, y: 36))
            bezier2Path.addLine(to: CGPoint(x: 217, y: 36))
            bezier2Path.close()
            color.setFill()
            bezier2Path.fill()
        }




        //// leftArrow
        if (leftArrowTop) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 28, y: 36))
            bezier3Path.addLine(to: CGPoint(x: 28, y: 7))
            bezier3Path.addLine(to: CGPoint(x: 0, y: 36))
            bezier3Path.addLine(to: CGPoint(x: 28, y: 36))
            bezier3Path.close()
            color.setFill()
            bezier3Path.fill()
        }


        if (leftArrowBottom) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 28, y: 36))
            bezier4Path.addLine(to: CGPoint(x: 28, y: 65))
            bezier4Path.addLine(to: CGPoint(x: 0, y: 36))
            bezier4Path.addLine(to: CGPoint(x: 28, y: 36))
            bezier4Path.close()
            color.setFill()
            bezier4Path.fill()
        }




        //// Text Drawing
        let textRect = CGRect(x: 38, y: 0, width: 170, height: 21)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: UIFont.labelSize()), NSForegroundColorAttributeName: UIColor.black(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: arrowText).boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clipTo(textRect)
        NSString(string: arrowText).draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context!.restoreGState()
    }

}
